-- Check operation of each of the typing rules.

-- (t-the) look through synonyms when checking ascribed types.
type nat: #Data = #Nat
test type the nat of 5


-- (t-run) look through synonyms when running suspensions.
type foo: #Comp = [#Nat] ! #Console + #Sleep
test type λ[x: [] → foo] → box x []


-- (t-apt) look through synonyms in term/type  application.
type thing2thing: #Data = ∀[a: #Data]. a → a
test type λ[f: thing2thing] → f @#Nat 3


-- (t-apm) look through synonyms in term/terms application.
type nat2nats: #Data = [#Nat, #Nat] → #Nat
test type λ[f: nat2nats] → f [2, 3]

-- (t-apm) check that suspensions in the result of applications
-- are being automatically run. If they were not then the type
-- of the result would be a double suspension.
term print [x: #Text]: [] ! #Console
 = box  #console'print x

test type box print "hello"


-- (t-apv) look through synonyms in term/term  application.
type nat2nat: #Data = #Nat → #Nat
test type λ[f: nat2nat] → f 3


-- (t-prj) look through synonyms when projecting fields from records.
type recy: #Data = [x: #Nat, y: #Nat, z: #Nat]
test type λ[r: recy] → r.x


-- (t-vnt) look through synonym to see expected type of body.
type vntx: #Data = <foo: #Nat, bar: #Nat>
test type the vntx of `foo 3


-- (t-cse) look through synonym to see type of scrutinee.
type vnty: #Data = <foo: #Nat, bar: #Nat>
test type λ[x: vnty] → case x of foo [x: #Nat] → x; bar [y: #Nat] → y

