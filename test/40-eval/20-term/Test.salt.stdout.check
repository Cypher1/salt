* evm'mmm'multi: [5,5]
* evm'var'clo: [[mclo|[menv|@[a = #Nat]], λ[x: a] → the a of 
                                     x]]
* evm'abs'type: [[mclo|[menv|@[a = #Nat]], λ[y: a] → y]]
* evm'abs'term: [[mclo|[menv|[x = 5]], λ[y: #Nat] → x]]
* evm'aps'prim: [5]
* evm'aps'prim2: [[list #Nat| ]]
* evm'aps'term'term: [10]
* evm'aps'term'terms: [5]
* evm'aps'term'type: [[mclo|[menv|@[a = #Nat]], λ[x: a] → x]]
* evm'aps'bump1: [2]
* evm'let: [5]
* evm'rec: [16]
* evm'rcd: [[x = [5,5], y = [9,9]]]
* evm'prj: [5,5]
* evm'vnt: [the ∑[foo: [#Nat, #Bool]] of `foo [2, #true]]
* evm'case: [5]
* evm'box: [[mclo_|λ[] → #console'print "hello"]]
* evm'run: [5]
* evm'list: [[list #Nat| 5, 5]]
* evm'set: [[set #Nat| 5, 6]]
* evm'map: [[map #Nat #Symbol| 5 := 'Derp]]
* region'private'nat: [1]
* region'private'effect: [18]
* region'extend'nat: [1]
* region'extend'effect: [17]
* pack'useful: [[pack [x = [5], f = [[mclo_|λ[n: #Nat] → n]]] with [#Nat] as ∃[a: #Data]. ∏[x: #Data, f: [#Data] → [#Nat]]]]
* pack'multiple: [[pack [x = [6], f = [[mclo_|λ[n: #Nat] → n]], y = ["hello world"], g = [[mclo_|λ[n: #Text] → n]]] with [#Nat, #Text] as ∃[a: #Data, b: #Data]. ∏[x: #Data, f: [#Data] → [#Nat], y: #Data, g: [#Data] → [#Text]]]]
* unpack'pack: [5]
* unpack'multiple: [6]
