-- Exercise all the cases in the term evaluator.

-- (evm-mmm) ----------------------------------------------
test eval evm'mmm'multi = [5, 5]


-- (evm-var-clo) ------------------------------------------
term thing @[a: #Data] [x: a]: a
 = x

test eval evm'var'clo
 = thing @#Nat


-- (evm-abt) ----------------------------------------------
test eval evm'abs'type
 = (λ@[a: #Data] [y: a] → y) @#Nat


-- (evm-abm) ----------------------------------------------
test eval evm'abs'term
 = (λ[x: #Nat] [y: #Nat]  → x) [5]


-- (evm-aps-prim) -----------------------------------------
test eval evm'aps'prim
 = #nat'add [2, 3]

type nat: #Data = #Nat
test eval evm'aps'prim2
 = #list'empty @nat


-- (evm-aps) ----------------------------------------------
test eval evm'aps'term'term
 = (λ[x: #Nat] → #nat'add [x, x]) 5

test eval evm'aps'term'terms
 = (λ[x: #Nat, y: #Nat] → #nat'add [x, y]) [2, 3]

test eval evm'aps'term'type
 = (λ@[a: #Data] → λ[x: a] → x) @#Nat

test eval evm'aps'bump1
 = (λ[x: #Nat] → λ[x: #Nat] → x^1) 2 3


-- (evm-let) ----------------------------------------------
test eval evm'let
 = let [x, y] = [2, 3]
   in  #nat'add [x, y]


-- (evm-rec) ----------------------------------------------
test eval evm'rec
 = rec { fac [n: #Nat]: #Nat
          = if #nat'eq n 0
              then 1
              else #nat'add n (fac (#nat'sub n 1)) }
   in fac 5


-- (evm-rcd) ----------------------------------------------
test eval evm'rcd
 = [ x = [#nat'add 2 3, 5]
   , y = [#nat'add 4 5, 9] ]


-- (evm-prj) ----------------------------------------------
test eval evm'prj
 = [ x = [#nat'add 2 3, 5]
   , y = 23].x


-- (evm'vnt) ----------------------------------------------
test eval evm'vnt
 = the <foo: [#Nat, #Bool]> of `foo [2, #true]


-- (evm'cse) ----------------------------------------------
type vnt: #Data = <foo: [#Nat, #Nat]>
term vnt: vnt = the vnt of `foo [2, 3]
test eval evm'case
 = case vnt of foo [x: #Nat, y: #Nat] → #nat'add [x, y]


-- (evm-box) ----------------------------------------------
test eval evm'box
 = box #console'print "hello"


-- (evm-run) ----------------------------------------------
test eval evm'run
 = run (box 5)


-- (evm-lst) ----------------------------------------------
term someList @[a: #Data] [x: a]: #List a
 = [list a| x, x]

test eval evm'list
 = someList @#Nat 5


-- (evm-set) ----------------------------------------------
term someSet  @[a: #Data] [x: a, y: a]: #Set a
 = [set a| x, y]

test eval evm'set
 = someSet @#Nat [5, 6]


-- (evm-map) ----------------------------------------------
term someMap  @[tk: #Data, tv: #Data] [k: tk, v: tv]: #Map [tk, tv]
 = [map tk tv| k := v ]

test eval evm'map
 = someMap @#Nat @#Symbol 5 'Derp

-- (evm-private) ----------------------------------------------
test eval region'private'nat
 = private r1 with {Read; Write; Alloc} in
       1

test eval region'private'effect
 = private r1 with {Read; Write; Alloc} in do
    p = #allocPtr @r1 @#Int8
    #writePtr @r1 @#Int8 p #int8'6
    t = #readPtr @r1 @#Int8 p
    t = #int8'add t #int8'12
    #writePtr @r1 @#Int8 p t
    #readPtr @r1 @#Int8 p

-- (evm-extend) ----------------------------------------------
test eval region'extend'nat
 = private r1 with {} in
     extend r1 using r2 with {} in
       1

test eval region'extend'effect
 = private r1 with {} in
    extend r1 using r2 with {Read; Write; Alloc} in do
        p = #allocPtr @r2 @#Int8
        #writePtr @r2 @#Int8 p #int8'17
        #readPtr @r2 @#Int8 p

-- (evm-pack) -----------------------------------------------
test eval pack'useful
 = pack [x=5, f=(λ[n: #Nat] → n)] with [#Nat] as ∃[a: #Data].∏[x: a, f:[a]->[#Nat]]

test eval pack'multiple
 = pack [x=6, f=(λ[n: #Nat] → n), y="hello world", g=(λ[n: #Text] -> n)]
     with [#Nat, #Text]
     as ∃[a: #Data, b: #Data].∏[x: a, f:[a]->[#Nat], y: b, g:[b]->[#Text]]

-- (evm-unpack) ---------------------------------------------
test eval unpack'pack
 = let t = pack [x=5, f=λ[x: #Nat] → x] with [#Nat] as ∃[a: #Data].∏[x: a, f:[a]->[#Nat]] in
     unpack t as r with [a] in (r.f r.x)

test eval unpack'multiple
 = let t = pack [x=6, f=(λ[n: #Nat] → n), y="hello world", g=(λ[n: #Text] -> n)]
     with [#Nat, #Text]
     as ∃[a: #Data, b: #Data].∏[x: a, f:[a]->[#Nat], y: b, g:[b]->[#Text]]
     in unpack t as r with [a, b] in (r.f r.x)
