

-- Factorial using tail recursion.
term fac1 [x: #Nat]: #Nat
 = if #nat'eq x 0
   then 1
   else #nat'mul x (fac1 (#nat'sub x 1))

test eval fac1 10


-- Factorial using procedural loop.
term fac2 [x: #Nat]: #Nat
 = launch #Nat of
   do   cell n: #Nat ← x
        cell a: #Nat ← 1
        loop do
                when (#nat'eq n 0) break
                a ← #nat'mul a n
                n ← #nat'sub n 1
                end
        return a

test eval fac2 10


-- Factorial using enter/leave.
--  We use a local recursive function and tail-calls to perform the loop.
proc fac3 [x: #Nat]: #Nat
 = do   cell n: #Nat ← x
        cell a: #Nat ← 1
        enter fac []
         with fac []: [] = do
                when (#nat'eq n 0) leave
                a ← #nat'mul a n
                n ← #nat'sub n 1
                fac []
        return a

test eval fac3 10
