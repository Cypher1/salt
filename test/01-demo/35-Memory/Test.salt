term addr'endtoend : []! #Console + #Memory
 = box do
     s = #sizeOf @#Word64
     p = #allocAddr s
     #writeAddr @#Word64 p #word64'0
     v1 = #readAddr @#Word64 p
     #writeAddr @#Word64 p #word64'143
     v2 = #readAddr @#Word64 p
     #console'println (#word64'show v1)
     #console'println (#word64'show v2)
     #freeAddr p

test exec addr'endtoend

term ptr'endtoend : []! #Console
 = box private r with {Read; Write; Alloc} in do
     p = #allocPtr @r @#Word64
     #writePtr @r @#Word64 p #word64'0
     v1 = #readPtr @r @#Word64 p
     #writePtr @r @#Word64 p #word64'143
     v2 = #readPtr @r @#Word64 p
     #console'println (#word64'show v1)
     #console'println (#word64'show v2)
     #freePtr @r @#Word64 p

test exec ptr'endtoend

term sizeOf'metley : []! #Console
 = box do
     #console'println (#word64'show (#sizeOf @#Bool))
     #console'println (#word64'show (#sizeOf @#Int8))
     #console'println (#word64'show (#sizeOf @#Int16))
     #console'println (#word64'show (#sizeOf @#Int32))
     #console'println (#word64'show (#sizeOf @#Int64))
     #console'println (#word64'show (#sizeOf @#Word8))
     #console'println (#word64'show (#sizeOf @#Word16))
     #console'println (#word64'show (#sizeOf @#Word32))
     #console'println (#word64'show (#sizeOf @#Word64))
     #console'println (#word64'show (#sizeOf @#Addr))

test exec sizeOf'metley

term sizeOf'ptr : []! #Console
 = box private r with {Read; Write; Alloc} in do
     s = #sizeOf @(#Ptr [r, #Word8])
     #console'println (#word64'show s)

test exec sizeOf'ptr

term addr'indirection : []! #Console + #Memory
 = box do
     -- p1 is the address of our underlying data, an int8
     p1 = #allocAddr (#sizeOf @#Int8)
     #writeAddr @#Int8 p1 #int8'1

     -- p2 refers to p1
     p2 = #allocAddr (#sizeOf @#Addr)
     #writeAddr @#Addr p2 p1

     v1 = #readAddr @#Int8 (#readAddr @#Addr p2)
     #writeAddr @#Int8 p1 #int8'100
     v2 = #readAddr @#Int8 (#readAddr @#Addr p2)

     #console'println (#int8'show v1)
     #console'println (#int8'show v2)

     #freeAddr p1
     #freeAddr p2

test exec addr'indirection

term ptr'indirection : []! #Console
 = box private r1 with {Read; Write; Alloc} in do
     -- p1 is the ptr of our underlying data, an int8
     p1 = #allocPtr @r1 @#Int8
     #writePtr @r1 @#Int8 p1 #int8'10

     -- p2 refers to p1
     p2 = #allocPtr @r1 @(#Ptr [r1, #Int8])
     #writePtr @r1 @(#Ptr [r1, #Int8]) p2 p1

     v1 = #readPtr @r1 @#Int8 (#readPtr @r1 @(#Ptr [r1, #Int8]) p2)
     #writePtr @r1 @#Int8 p1 #int8'25
     v2 = #readPtr @r1 @#Int8 (#readPtr @r1 @(#Ptr [r1, #Int8]) p2)

     #console'println (#int8'show v1)
     #console'println (#int8'show v2)

     #freePtr @r1 @#Int8 p1
     #freePtr @r1 @(#Ptr [r1, #Int8]) p2

test exec ptr'indirection

term ptr'roundtrip : []! #Console + #Memory
 = box private r1 with {Read; Write; Alloc} in do
     p1 = #allocPtr @r1 @#Int8
     #writePtr @r1 @#Int8 p1 #int8'42

     a = #takePtr @r1 @#Int8 p1
     #console'println (#int8'show (#readAddr @#Int8 a))

     #writeAddr @#Int8 a #int8'67
     p2 = #makePtr @r1 @#Int8 a

     #console'println (#int8'show (#readPtr @r1 @#Int8 p2))

test exec ptr'roundtrip
