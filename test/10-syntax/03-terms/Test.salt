-- Test syntax of terms.

-- Primitive Values -----------------------------------------------------------
test type unit          = #unit

test type bool'true     = #true
test type bool'true2    = #bool'true
test type bool'false    = #true
test type bool'false2   = #bool'false

test type nat1          = 1
test type nat1234       = 1234

test type nat'2         = #nat'2
test type int'1         = #int'1
test type word'1        = #word'1

test type int8'127          = #int8'127
test type int16'32767       = #int16'32767
test type int32'2147483647  = #int32'2147483647
test type int64'1           = #int64'1

test type word8'255         = #word8'255
test type word16'65535      = #word16'65535
test type word32'4294967295 = #word32'4294967295
test type word64'1          = #word64'1

test type symbol        = 'Foo
test type symbol2       = 'Bar1234


-- Term vector ----------------------------------------------------------------
test type vec           = [1, 2, 3]
test type none1         = []


-- Type ascription ------------------------------------------------------------
test type the'nat       = the #Nat of 3
test type the'things    = the [#Nat, #Bool] of [3, #true]

test type the'nat's     = 3 : #Nat
test type the'things's  = [3, #true] : [#Nat, #Bool]


-- Type abstraction -----------------------------------------------------------
test type abt1          = λ@[a: #Data] → λ[x: a] → x
test type abt2          = λ@[a: #Data] [x: a] → x
test type abt3          = λ@[a: #Data, b: #Data] [f: a → b, x: a] → f x

test type abt1'bump     = λ@[a: #Data] @[a: #Data] [f: a^1 → a^1, x: a^1] → f x

test type abt1'sugar    = fun @[a: #Data] -> λ[x: a] -> x
test type abt2'sugar    = fun @[a: #Data] [x: a] -> x
test type abt3'sugar    = fun @[a: #Data, b: #Data] [f: a -> b, x: a] -> f x


-- Term abstraction -----------------------------------------------------------
test type abm1          = λ[x: #Bool] → x
test type abm2          = λ[x: #Bool, y: #Nat] → x
test type abm3          = λ[x: #Bool, y: #Nat] → [x, y]
test type abm4          = λ[x: #Bool, y: #Nat] → []
test type abm5          = λ[] → []

test type abm1'bump     = λ[x: #Bool] [x: #Nat] → x^1

test type abm1'sugar    = fun [x: #Bool] -> x
test type abm2'sugar    = fun [x: #Bool, y: #Nat] -> x
test type abm3'sugar    = fun [x: #Bool, y: #Nat] -> [x, y]
test type abm4'sugar    = fun [x: #Bool, y: #Nat] -> []
test type abm5'sugar    = fun [] -> []


-- Recursive bindings ---------------------------------------------------------
test type rec1
 = rec { f [x: #Nat]: #Nat = if #nat'gt [x, 0] then g [#nat'sub [x, 1]] else 0
       ; g [x: #Nat]: #Nat = f [x] }
   in  f [5]


-- Term/Term application ------------------------------------------------------
test type appm'not      = #bool'not [#true]
test type appm'not'1    = #bool'not #true

test type appm'and      = #bool'and [#true, #false]

test type appm'lam1     = (λ[x: #Bool] → x) [#true]

test type appm'lam2     = (λ[f: #Bool → #Bool, x: #Bool] → f x)
                                [λ[x: #Bool] → [x], #true]

test type appm'vec      = (λ[x: #Bool, y: #Bool] → y)
                                ((λ[x: #Bool] → [x, x]) [#true])

test type appm'lam1's   = (fun [x: #Bool] -> x) [#true]

test type appm'lam2's   = (fun [f: #Bool -> #Bool, x: #Bool] -> f x)
                                [λ[x: #Bool] -> x, #true]


-- Term/Type application ------------------------------------------------------
test type appt'double   = (λ@[a: #Data] [x: a] → [x, x]) @[#Nat] [5]

test type appt'double'1 = (λ@[a: #Data] [x: a] → [x, x]) @#Nat [5]

test type appt'app      = (λ@[a: #Data, b: #Data] [f: a → b, x: a] → f x)
                                @[#Bool, #Bool]
                                 [ (λ[a: #Bool] → #bool'not a)
                                 , #true]


-- Let bindings ---------------------------------------------------------------
test type let'fst       = let [x, y] = (λ[x: #Bool] → [x, 5]) [#true] in x
test type let'snd       = let [x, y] = (λ[x: #Bool] → [5, x]) [#true] in x

test type let'one       = let x = 5 in #nat'add [x, x]

test type let'some      = let a = 2 in let b = 3 in #nat'add [a, b]


-- If expressions -------------------------------------------------------------
test type if'then'else
 = if #nat'eq [1, 2] then 3 else 4

test type ifs'three
 = ifs  #nat'eq [1, 2] → 3
        #nat'eq [2, 3] → 4
        #nat'eq [3, 4] → 5
   else 6

test type ifs'three'else
 = ifs  #nat'eq [1, 2] → 3
        #nat'eq [2, 3] → 4
        #nat'eq [3, 4] → 5
        else           → 6


-- Do blocks ------------------------------------------------------------------
test type do'fst
 = do   [x, y] = (λ[x: #Bool] → [x, 5]) [#true]
        x

test type do'some
 = do   a = 2; b = 3
        #nat'add [a, b]

test type do'things
 = do   a       = 2
        [b, c]  = [2, 3]
        d       = #nat'add [a, b]
        #nat'add [a, #nat'add [b, #nat'add [c, d]]]


-- Records --------------------------------------------------------------------
test type record0       = ∏[]
test type record1       = ∏[x = 5]
test type record2       = ∏[x = 5, y = #true, z = #unit]

test type record0's     = [record|]
test type record1's     = [record| x = 5]
test type record2's     = [record| x = 5, y = #true, z = #unit]

test type record'one    = [x = 5]
test type record'two    = [x = 5, y = #true]
test type record'three  = [x = 5, y = #true, z = #unit]
test type record'multi  = [xs = [1, 2, 3], ys = [#unit, 1, #true, #false]]

test type field'one     = [x = 5].x
test type field'two     = [x = 5, y = #true].y
test type field'nest    = [x = [x = 5, y = #unit], y = #true].x.y
test type field'paren   = (([x = [x = 5, y = #unit], y = #true]).x).y
test type field'multi   = [xs = [1, 2, 3], ys = [#unit, 1, #true, #false]].ys


-- Variants --------------------------------------------------------------------
test type variant0      = the <foo: #Nat> of `foo 5
test type variant1      = the <foo: #Nat, bar: #Nat> of `foo 5
test type variant2      = the <foo: [#Nat, #Nat]> of `foo [1, 2]

test type case0
 = λ[xx: <none: #Unit, some: #Nat>]
 → case xx of
        none [u: #Unit] → 0
        some [n: #Nat]  → n

test type case1
 = λ[xx: <none: [], one: #Nat, two: [#Nat, #Nat]>]
 → case xx of
        none []                 → 0
        one  [x: #Nat]          → x
        two  [x: #Nat, y: #Nat] → #nat'add [x, y]


-- Option-----------------------------------------------------------------------
test type option'none   = #None @#Nat []
test type option'som    = #Some @#Nat 4


-- List ------------------------------------------------------------------------
test type list'empty    = [list #Nat|]
test type list'some     = [list #Nat| 1, 2, 3]
test type list'head     = #list'head @#Nat [list #Nat| 1, 2, 3]
test type list'tail     = #list'tail @#Nat [list #Nat| 1, 2, 3]


-- Set ------------------------------------------------------------------------
test type set'empty     = [set #Nat|]
test type set'some      = [set #Nat| 1, 2, 3]
test type set'size      = #set'size @#Nat [set #Nat| 1, 2, 3, 4, 5]


-- Map ------------------------------------------------------------------------
test type map'empty     = [map #Nat #Symbol|]
test type map'some      = [map #Nat #Symbol| 3 := 'three, 5 := 'five]
test type map'size      = #map'size   @[#Nat, #Symbol] [map #Nat #Symbol|]
test type map'insert    = #map'insert @[#Nat, #Symbol] [4, 'Derp, [map #Nat #Symbol|]]

-- Regions --------------------------------------------------------------------
test type region'private
 = private r with {Alloc; Write; Read} in
     let p = #allocPtr @[r, #Word8] in
       #freePtr @[r, #Word8] p

test type region'extend
 = private r1 with {Alloc; Write; Read} in
     extend r1 using r2 with {Read; Write; Alloc} in
       let p = #allocPtr @[r2, #Word8] in
         #freePtr @[r2, #Word8] p


-- Existential ----------------------------------------------------------------
test type pack'useless
 = pack 0 with [#Nat] as ∃[a: #Data].a

test type pack'useful
 = pack [x=5, f=(λ[x: #Nat] → x)] with [#Nat] as ∃[a: #Data].∏[x: a, f:[a]->[#Nat]]

test type unpack'pack
 = let t = pack [x=5, f=λ[x: #Nat] → x] with [#Nat] as ∃[a: #Data].∏[x: a, f:[a]->[#Nat]] in
     unpack t as r with [ty] in (r.f r.x)

