-- Test syntax of types.

-- Check kinding of primitive data constructors.
test kind unit          = #Unit
test kind bool          = #Bool
test kind nat           = #Nat
test kind int           = #Int
test kind text          = #Text
test kind symbol        = #Symbol
test kind option        = #Option
test kind list          = #List
test kind set           = #Set
test kind map           = #Map


-- Type application.
test kind app'option    = #Option [#Nat]
test kind app'list      = #List [#Nat]
test kind app'set       = #Set [#Nat]
test kind map'nat       = #Map [#Nat, #Text]


-- Nested application.
test kind app'set'set   = #Set [#Set [#Nat]]

-- Type function.
test kind op1           = λ[a: #Data, b: #Data] ⇒ a
test kind op2           = λ[a: #Data ⇒ #Data] ⇒ a
test kind op3           = (λ[a: #Data, b: #Data] ⇒ a) [#Nat, #Bool]

test kind op1'sugar     = fun [a: #Data, b: #Data] => a
test kind op2'sugar     = fun [a: #Data => #Data] => a
test kind op3'sugar     = (fun [a: #Data, b: #Data] => a) [#Nat, #Bool]


-- Forall type.
test kind all1          = ∀[a: #Data, b: #Data]. a → b

test kind all1'sugar    = forall [a: #Data, b: #Data]. a -> b

test kind all1'region   = forall [r: #Region, t: #Data]. #Ptr [r, t] -> #Ptr [r, t]

-- Exists type.
test kind some1         = ∃[a: #Data, b: #Data]. a → b

test kind some1'sugar   = exists [a: #Data, b: #Data]. a → b

test kind some1'region  = exists [a: #Region, b: #Region, t: #Data]. #Ptr [a, t] -> #Ptr [b, t]

-- Record types.
test kind rec0          = ∏[foo: #Symbol]
test kind rec1          = ∏[one: #Symbol, two: #Nat]
test kind rec2          = ∏[one: #Symbol, two: ∏[foo: #Nat]]

test kind rec0'sugar1   = [record|]
test kind rec1'sugar1   = [record|one: #Symbol, two: #Nat]
test kind rec2'sugar1   = [record|one: #Symbol, two: [record|foo: #Nat]]

test kind rec1'sugar2   = [one: #Symbol, two: #Nat]
test kind rec2'sugar2   = [one: #Symbol, two: [foo: #Nat]]


-- Variant types.
test kind vnt0          = ∑[]
test kind vnt1          = ∑[one: #Symbol, two: #Nat]
test kind vnt2          = ∑[one: #Symbol, two: ∑[foo: #Nat]]

test kind vnt0'sugar1   = [variant|]
test kind vnt1'sugar1   = [variant|one: #Symbol, two: #Nat]
test kind vnt2'sugar1   = [variant|one: #Symbol, two: [variant|foo: #Nat]]

test kind vnt1'sugar2   = <one: #Symbol, two: #Nat>
test kind vnt2'sugar2   = <one: #Symbol, two: <foo: #Nat>>


-- Function types.
test kind fun1          = [#Nat, #Nat] → [#Nat]
test kind fun2          = [#Nat] → [#Nat] → [#Bool]
test kind fun3          = #Map [#Nat, #Bool] → #Nat
test kind fun4          = #Nat → #Map [#Nat, #Bool]

test kind fun1'sugar    = [#Nat, #Nat] -> [#Nat]
test kind fun2'sugar    = [#Nat] -> [#Nat] -> [#Bool]
test kind fun3'sugar    = #Map [#Nat, #Bool] -> #Nat
test kind fun4'sugar    = #Nat -> #Map [#Nat, #Bool]


-- Effect types
test kind effect1       = pure
test kind effect2       = sync
test kind effect3       = #Console
test kind effect4       = #Console + #Sleep
test kind effect5       = pure + #Console + (#Sleep + sync)
test kind effect6       = (pure + #Console) + (#Sleep + sync)
test kind effect7       = #Memory


-- Suspension types.
test kind susp1         = [#Nat, #Nat] ! #Console
test kind susp2         = #Nat ! #Console
test kind susp3         = #Nat → [#Nat, #Nat] ! #Console
test kind susp4         = []! #Console + #Sleep
test kind susp5         = []! pure
test kind susp6         = []! sync


-- Quoted identifiers
test kind quoted1       = fun [##Var"x" : #Data] => x
test kind quoted2       = fun [##Var"x" : ##Prm"Data"] => ##Var"x"
test kind quoted3       = fun [##Var"->" : #Data => #Data] => ##Var"->"

