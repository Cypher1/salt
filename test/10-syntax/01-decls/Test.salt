-- Test syntax of top-level declarations.

-- Type decls -----------------------------------------------------------------
-- Simple type decls with no parameters.
type nat1: #Data = #Nat

-- Higher kinded type decls with no parameters.
type some: #Data ⇒ #Data = λ[a: #Data] ⇒ [x: a, y: a]

-- Higher kinded type decls with parameters, same as above.
type some2 [a: #Data]: #Data = [x: a, y: a]


-- Term decls -----------------------------------------------------------------
term fac [x: #Nat]: #Nat
 = if #nat'eq [x, 0]
        then 1
        else #nat'mul x (fac (#nat'sub x 1))


-- Test decls -----------------------------------------------------------------
-- Test kind decls.
test kind #Nat
test kind nat2 = #Nat


-- Test type decls.
test type 5
test type nat3 = 5


-- Test eval decls.
test eval fac 6
test eval fac05 = fac 5


-- Test exec decls.
test exec print = box #console'println "hello"
test exec box #console'println "world"


-- Test assert decls.
test assert #true
test assert #bool'and [#true, #true]

